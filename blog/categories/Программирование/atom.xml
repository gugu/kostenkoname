<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Программирование | Андрей Костенко]]></title>
  <link href="http://gugu.github.com/kostenkoname/blog/categories/Программирование/atom.xml" rel="self"/>
  <link href="http://gugu.github.com/kostenkoname/"/>
  <updated>2013-12-06T00:28:13+04:00</updated>
  <id>http://gugu.github.com/kostenkoname/</id>
  <author>
    <name><![CDATA[Andrii Kostenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Django hints]]></title>
    <link href="http://gugu.github.com/kostenkoname/blog/2011/11/01/django-hints/"/>
    <updated>2011-11-01T00:16:49+04:00</updated>
    <id>http://gugu.github.com/kostenkoname/blog/2011/11/01/django-hints</id>
    <content type="html"><![CDATA[<h3>South</h3>

<p>./manage.py syncdb создает только новые таблицы, а вот если вы добавляете или удаляете столбцы, то syncdb вам не поможет. А вот добавление south в список приложений позволяет автоматически создавать миграции, применять-откатывать их и следить, какой SQL был выполнен, а какой – нет.</p>

<h3>django-denorm</h3>

<p>Этот модуль автоматически создает триггеры на счетчики и вообще очень упрощает работу с денормализованными структурами БД</p>

<h3>django-social-auth</h3>

<p>Запомните название. Есть django-SocialAuth – редкостная шляпа.</p>

<h3>django-mobile</h3>

<p>Определение мобильного телефона и отображение разных шаблонов в зависимости от типа устройства.</p>

<h3>django-compressor</h3>

<p>все, что между тегами &#123;% compress %} &#123;% endcompress %} парсится, находятся теги &lt;script&gt; и &lt;link rel="stylesheet" /&gt;, склеиваются, сжимаются или препроцессятся при необходимости</p>

<h3>sentry</h3>

<p>Добавляет интерфейс статистики по ошибкам, по количеству, дате последнего появления. Очень много фич, все описывать не буду.</p>

<h3>django-admin-toolbar</h3>

<p>Конфигурируемая админка. Кастомные темы, модули, меню. Everything is possible.</p>

<h3>django-piston</h3>

<p>Генерация API по модели.</p>

<h3>jinja2/coffin</h3>

<p>Шаблонный движок с синтаксисом django и с производительность 10x от django-шаблонов</p>

<h3>django-celery</h3>

<p>Удобный интерфейс к системе очередей. Из коробки есть worker-ы, аналог крона (задачи по расписанию), поддержка кучи очередей: beanstalkd, AMQP и т.д. Есть удобный error-reporting.</p>

<h3>django-haystack</h3>

<p>Обертка над системами полнотекстового поиска. Поддерживаются Solr, elasticsearch, xapian и whoosh</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM. Tags]]></title>
    <link href="http://gugu.github.com/kostenkoname/blog/2010/09/10/vim-tags/"/>
    <updated>2010-09-10T17:57:24+04:00</updated>
    <id>http://gugu.github.com/kostenkoname/blog/2010/09/10/vim-tags</id>
    <content type="html"><![CDATA[<p>Решил разобраться получше с vim и ctags. Для справки: ctags - это команда, которая сканирует ваш проект и собирает информацию о классах, методах, функциях и переменных, после чего вы можете перейти на нужную вам функцию.</p>

<p>В vim это делается так. В корне проекта пишем:</p>

<pre><code>ctags -R
vim -t MyClassName
</code></pre>

<p>и попадаем на определение класса. Удобно?</p>

<p>Сейчас если мы поставим указатель на вызов функции или создание экземпляра класса и нажмем Ctrl+] (для виндузятников это Ctrl+мышка), то перейдем на определение класса.</p>

<p>А комбинация Ctrl+T вернет нас назад.</p>

<p>Авторы ctags с детства не любят питон, поэтому в ~/.ctags питонюки пишут:</p>

<pre><code>--python-kinds=-i
</code></pre>

<p>Зачем? Так надо.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[perl2port]]></title>
    <link href="http://gugu.github.com/kostenkoname/blog/2009/12/03/perl2port/"/>
    <updated>2009-12-03T16:17:29+03:00</updated>
    <id>http://gugu.github.com/kostenkoname/blog/2009/12/03/perl2port</id>
    <content type="html"><![CDATA[<p>Странно, что этого до сих пор никто не написал: <a href="http://search.cpan.org/~gugu/App-Pm2Port-0.23/">App::Pm2Port</a></p>

<p>Создаёт порт из перлового модуля и отправляет его разработчикам FreeBSD.</p>

<p>Как работать:</p>

<pre><code>pm2port CSS::Croco
</code></pre>

<p>Тестируем и находим баги.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Это двадцатый пост с названием "Заебали"]]></title>
    <link href="http://gugu.github.com/kostenkoname/blog/2009/11/13/optimization/"/>
    <updated>2009-11-13T00:31:27+03:00</updated>
    <id>http://gugu.github.com/kostenkoname/blog/2009/11/13/optimization</id>
    <content type="html"><![CDATA[<p>Постоянно от программистов слышу жуткую заботу о производительности приложений. Поэтому я попросил Капитана Очевидность прояснить ситуацию:</p>

<p> -- Капитан, что вы думаете об оптимизации производительности?
 -- Я, как и все адекватные личности не думаю о ней без надобности. Ещё я терпеть не могу биомассу, которая занимается преждевременной оптимизацией. О ней нужно думать лишь тогда, когда всё действительно уж хреново. Как правило, программисты обычно пишут проект немытыми руками, вследствие чего он начинает тормозить. Потом они на этот проект навешивают пять уровней кэширования, надеясь, что это загладит их проёб. Постараюсь привести интересную цитату профессора из MIT (спасибо, vovkasm-у):</p>

<blockquote><p>Here is the list of things more important than performance:</p>

<ul>
<li><p>modularity,</p></li>
<li><p>correctness,</p></li>
<li><p>maintainability,</p></li>
<li><p>security,</p></li>
<li><p>functionality,</p></li>
<li><p>robustness,</p></li>
<li><p>user-friendliness,</p></li>
<li><p>programmer’s time,</p></li>
<li><p>simplicity,</p></li>
<li><p>extensibility,</p></li>
<li><p>reliability, and</p></li>
<li><p>scalability.</p></li>
</ul>
</blockquote>

<p>Этот, сука, умный дядя говорит «не страдайте хуйнёй». Пишите максимально хороший код и вы забудете про оптимизацию.</p>
]]></content>
  </entry>
  
</feed>
