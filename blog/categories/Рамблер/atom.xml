<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Рамблер | Андрей Костенко]]></title>
  <link href="http://gugu.github.com/kostenkoname/blog/categories/Рамблер/atom.xml" rel="self"/>
  <link href="http://gugu.github.com/kostenkoname/"/>
  <updated>2014-01-29T13:34:46+04:00</updated>
  <id>http://gugu.github.com/kostenkoname/</id>
  <author>
    <name><![CDATA[Andrii Kostenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[perl2port]]></title>
    <link href="http://gugu.github.com/kostenkoname/blog/2009/12/03/perl2port/"/>
    <updated>2009-12-03T16:17:29+03:00</updated>
    <id>http://gugu.github.com/kostenkoname/blog/2009/12/03/perl2port</id>
    <content type="html"><![CDATA[<p>Странно, что этого до сих пор никто не написал: <a href="http://search.cpan.org/~gugu/App-Pm2Port-0.23/">App::Pm2Port</a></p>

<p>Создаёт порт из перлового модуля и отправляет его разработчикам FreeBSD.</p>

<p>Как работать:</p>

<pre><code>pm2port CSS::Croco
</code></pre>

<p>Тестируем и находим баги.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ускоряем свой HTTP-сервер]]></title>
    <link href="http://gugu.github.com/kostenkoname/blog/2009/11/05/accept-filters/"/>
    <updated>2009-11-05T22:17:38+03:00</updated>
    <id>http://gugu.github.com/kostenkoname/blog/2009/11/05/accept-filters</id>
    <content type="html"><![CDATA[<p>Для начала расскажу, как обычно работают сервера:</p>

<ol>
<li><p>Создаётся сокет, который слушает порт</p></li>
<li><p>Вызывается системный вызов accept, который берёт первого клиента из очереди соединений, а если его нет - то блокирует приложение до тех пор, пока он не появится</p></li>
<li><p>Приложение что-то делает с этим клиентом и в конце концов с ним прощается</p></li>
<li><p>goto пункт два</p></li>
</ol>


<p>nginx и lighttpd использует вместо accept функции select/kevent/epoll, которые позволяют работать со многими клиентами одновременно, но это уже отдельная история (к асинхронным веб-серверам accept-фильтры применимяются точно так же)</p>

<p>Accept-фильтры - это модули ядра FreeBSD, которые не говорят, что сокет готов до тех пор, пока не выполнится какое-то условие. Я нашёл только два фильтра:</p>

<ul>
<li><p><strong>dataready</strong> - accept блокирует сокет до тех пор, пока в него прийдут данные. Когда мы получаем сокет, мы уже точно можем из него что-то считать</p></li>
<li><p><strong>httpready</strong> - сокет блокируется до тех пор, пока не прийдёт полный GET/HEAD запрос. Соответственно, нам не надо тратить время на переключение контекста, если запрос ещё не собрался.</p></li>
</ul>


<h3>Остановимся на фильтре httpready</h3>

<p>Буферизирует он только GET и HEAD запросы, так как в POST/PUT может прийти 600мегабайтный <a href="http://mirrors.kernel.org/gentoo/releases/amd64/autobuilds/current-iso/install-amd64-minimal-20091029.iso">порнофильм</a>.
Итак, подключаем модуль accf_http:</p>

<pre><code>    kldload accf_http
    echo 'accf_http_load=”YES”' &gt;&gt; /boot/loader.conf
</code></pre>

<p>Далее нужно изменить работу с сокетом -- установить опцию httpready:</p>

<pre><code>        struct accept_filter_arg afa;
        bzero(&amp;afa;, sizeof(afa));
        strcpy(afa.af_name, "httpready");
        setsockopt(sok, SOL_SOCKET, SO_ACCEPTFILTER, &amp;afa;, sizeof(afa)); 
</code></pre>

<h3>Результаты тестов</h3>

<p>Так как существует мнение, что accept-фильтры бесполезны, мы решили провести тестирование. Веб-сервер был выбран AnyEvent::HTTPD, клиент - ab. Итак, результаты:</p>

<ol>
<li><p>локальная машина, 10000 запросов, concurrency = 4: httpready даёт прирост в 10%</p></li>
<li><p>локальная сеть, 10000 запросов, concurrency=1000: httpready даёт прирост в 10%</p></li>
<li><p>локальная сеть, 10000 запросов, concurrency = 4: прирост в 25%</p></li>
<li><p>локальная сеть, 1000 запросов, concurrency = 1: в два раза!</p></li>
</ol>


<p>В боевых условиях, при наличии GPRS, 256k и прочего позора цивилизации, скорость ещё увеличится.</p>

<h3>Настройка веб-серверов</h3>

<p>В apache 1.3+ и nginx accept-фильтры поддерживаются.</p>

<p>Apache под FreeBSD изначально содержит такую конфигурацию:</p>

<pre><code> AcceptFilter http httpready
 AcceptFilter https dataready 
</code></pre>

<p>и менять её не стоит.
А вот в настройках сервера nginx стоит добавить опцию</p>

<pre><code>    accept_filter "httpready";
</code></pre>

<h3>Ссылки</h3>

<ul>
<li><p><a href="http://sysoev.ru/freebsd/accept-filters.html">статья Игоря Сысоева</a></p></li>
<li><p>man accf_http</p></li>
<li><p>man accf_data</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeechBlock]]></title>
    <link href="http://gugu.github.com/kostenkoname/blog/2009/10/05/leechblock/"/>
    <updated>2009-10-05T20:14:15+04:00</updated>
    <id>http://gugu.github.com/kostenkoname/blog/2009/10/05/leechblock</id>
    <content type="html"><![CDATA[<p>Этот пост посвящен распиздяям, которые не могут заставить себя работать. Я из таких людей. Ведь кроме исправления говна, которое  я накодировал, есть всякие вконтактики, фейсбуки, твиттеры и остальные убивалки времени. И я нихрена не успеваю.</p>

<p>Как только я пришёл в Рамблер, я осознал, что из-за постоянного распиздяйства в Приватбанке, я вконец разленился. И начал заставлять себя работать. В этом мне помог отличный плагин к Firefox - <a href="https://addons.mozilla.org/en-US/firefox/addon/4476">LeechBlock</a>.</p>

<p>Он умеет</p>

<ul>
<li><p>блокировать заразные сайты (vkontakte,twitter, etc)</p></li>
<li><p>блокировать сайты по времени - например, с 13:00 до 24:00 у меня заблокирована вся гадость</p></li>
<li><p>во время блокировки можно запретить изменение настроек и доступ к <a href="about:config">about:config</a></p></li>
<li><p>можно ставить лимиты, напоимер: 5 минут в час на почту, 5 минут в день - на вконтакте</p></li>
</ul>


<p>Вот и сейчас себе его поставил...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Небольшой пост о моей личной жизни...]]></title>
    <link href="http://gugu.github.com/kostenkoname/blog/2009/07/08/private/"/>
    <updated>2009-07-08T00:15:56+04:00</updated>
    <id>http://gugu.github.com/kostenkoname/blog/2009/07/08/private</id>
    <content type="html"><![CDATA[<p>Сегодня заметил, что прошёл уже год, как Я работаю в <a href="http://rambler.ru/">Рамблере</a>...</p>

<p>По этому поводу я напишу немного букав. Как сейчас помню фразу, сказанную моим начальником, АП Витязем:</p>

<blockquote><ul>
<li>Пока у вас нет семьи и детей, вы не привязаны ни к чему. Можете в любой момент взять и уехать куда-то.</li>
</ul>
</blockquote>

<p>Может быть я не передал фразу дословно, но смысл был таким. Через пару месяцев я поехал на UA Web в Киев, где с отвисшей челюстью слушал о том, как у Яндекса и других компаний всё охуенно. И подумал, а не отправить ли мне резюме в Яндекс.</p>

<p>Отправил. Для симметрии его же послал в Рамблер и Mail.ru. Кто-то из этой счастливой тройки (скорее всего Mail.ru) позвонил моему начальнику из Приватбанка, за что я получил изрядных пиздюлей :-)</p>

<p>Когда я ехал в Маскву, я надеялся, что мне удастся найти работу в Яндексе. Ну и собеседование в Рамблере для галочки пройти стоило. :-) Тогда же я устроил аукцион прикольный. В стиле "пойду к тем, кто больше заплатит". Яндексоиды предложили больше, но мне уже хотелось в Рамблер. Ведь в Рамблере был мой любимый Catalyst и DBIx::Class :-)</p>

<p>И я ни разу не пожалел об этом решении... К чему это я? Да ни к чему, просто понос мыслей.</p>

<p>Но если вы такой зануда, что не заснули, читая мой пост, то я задам вам вопрос:</p>

<p>Пригодилось ли вам реально в жизни высшее образование? С реальными историями, желательно.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Андрею нехуй нечего было делать делать в 5 утра]]></title>
    <link href="http://gugu.github.com/kostenkoname/blog/2008/11/04/algorithm-floodcontro/"/>
    <updated>2008-11-04T06:08:41+03:00</updated>
    <id>http://gugu.github.com/kostenkoname/blog/2008/11/04/algorithm-floodcontro</id>
    <content type="html"><![CDATA[<p>Для начала расскажу историю. В далёком 2004-м году чувак по имени <a href="http://cade.datamax.bg/">Vladi Belperchinov-Shabanski "Cade"</a> написал модуль Algorithm::FloodControl. В те дремучие века люди не знали, что такое ООП и их заботила поддержка Perl4 :-)</p>

<p>Сделал апгрейд этому модулю. Сделал его ООП-шным, добавил поддержку backend-ов для Cache::Memcached::Fast, Cache::FastMmap. Сделал и для Cache::Memcached, ибо не сложно три строки написать, но когда 15 процессов инкрементят запись, то срабатывает от силы 10% инкрементов. Ниипу почему.</p>

<p>Наверное, ещё будут бока с документацией. Это я поправлю.</p>

<p><a href="http://kostenko.name/wp-content/uploads/2008/11/algorithm-floodcontrol-190tar.gz">Algorithm-FloodControl-1.90</a></p>
]]></content>
  </entry>
  
</feed>
